/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package db;

import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author osman
 */
public class FrmAddMode extends javax.swing.JPanel {

    /**
     * Creates new form FrmAddItem
     */
    FrmMode parent;
    boolean isEdited=false;
    DatabaseType db= new DatabaseType();
    String currentMode="";
    
    public FrmAddMode(FrmMode p) {
        initComponents();
        parent=p;
        txtModeName.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtModeName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCharge = new javax.swing.JTextField();
        txtServiceTime = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        optDiscount = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(13, 71, 93));
        setLayout(null);

        cmdSave.setText("Save");
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        add(cmdSave);
        cmdSave.setBounds(160, 360, 80, 40);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        add(cmdCancel);
        cmdCancel.setBounds(280, 360, 80, 40);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Service Days");
        add(jLabel2);
        jLabel2.setBounds(100, 250, 90, 30);

        txtModeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModeNameActionPerformed(evt);
            }
        });
        add(txtModeName);
        txtModeName.setBounds(220, 90, 200, 30);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Name");
        add(jLabel3);
        jLabel3.setBounds(100, 90, 90, 30);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Extra Charge (%)");
        add(jLabel4);
        jLabel4.setBounds(100, 170, 90, 30);

        txtCharge.setText("0");
        txtCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtChargeActionPerformed(evt);
            }
        });
        add(txtCharge);
        txtCharge.setBounds(220, 170, 200, 30);

        txtServiceTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServiceTimeActionPerformed(evt);
            }
        });
        add(txtServiceTime);
        txtServiceTime.setBounds(220, 250, 200, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Mode Info");
        add(jLabel6);
        jLabel6.setBounds(190, 10, 160, 50);

        optDiscount.setForeground(new java.awt.Color(255, 255, 255));
        optDiscount.setSelected(true);
        optDiscount.setText("Discount");
        optDiscount.setOpaque(false);
        optDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optDiscountActionPerformed(evt);
            }
        });
        add(optDiscount);
        optDiscount.setBounds(430, 90, 67, 23);
    }// </editor-fold>//GEN-END:initComponents

    
    public void serviceRequest(String name)
    {
        String query="Select * from mode where mName='" + name + "'";
        
        currentMode=name;
        isEdited=true;
        
        
        db.openConnection();
        
        try
        {
            ResultSet rs= db.read(query);
            rs.next();
            
            txtModeName.setText(rs.getString("mName"));
            txtCharge.setText(String.valueOf(rs.getDouble("mulFactor")));
            txtServiceTime.setText(rs.getString("processTime"));
            
            if(rs.getString("discount").contentEquals("1"))
            {
                optDiscount.setSelected(true);
                currentMode="1";
            }
            else
            {
                optDiscount.setSelected(false);
                currentMode="0";
                        
            }
            
            
            
        }
        catch(Exception e)
        {
                JOptionPane.showMessageDialog(null, e.getMessage(),"Oops",JOptionPane.ERROR_MESSAGE);
        }
        
        db.closeConnection();
       
    }
    
    private void txtModeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModeNameActionPerformed

    private void txtChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtChargeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtChargeActionPerformed

    private void txtServiceTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServiceTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServiceTimeActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        if(verified() && updateToDb())
        {   
            parent.updateList();
            parent.toggle();
            clearAll();
        }
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        clearAll();
        parent.toggle();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void optDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optDiscountActionPerformed
        if(optDiscount.isSelected())
        {
            currentMode="1";
            System.out.println("En");
        }
        else
        {
            currentMode="0";
            System.out.println("D-En");
        }
        
    }//GEN-LAST:event_optDiscountActionPerformed

    public void clearAll()
    {
        isEdited=false;
        currentMode="";
        txtCharge.setText(currentMode);
        txtServiceTime.setText(currentMode);
        txtModeName.setText(currentMode);
    }
    private boolean verified()
    {
        
        String problems="";
        double myVal;
        
        if(txtModeName.getText().length()==0 ||  txtModeName.getText().length()> 30)
        {
            problems="Item Name Should be between 1 to 30 characters";
        }
       
       try
                {
                 myVal=   Double.parseDouble(txtCharge.getText());
                 if(myVal<0 || txtCharge.getText().length()==0 ) throw new Exception("Problem");
                }
       catch(Exception e)
                {
                        problems="Invalid Extra Charges given";
                }
       
       
       try
                {
                 myVal=   Integer.parseInt(txtServiceTime.getText());
                 if(myVal<0 || txtServiceTime.getText().length()==0) throw new Exception("Problem");
                 
                }
       catch(Exception e)
                {
                        problems="Invalid Service Duration given";
                }
       
       
        
        if(problems.length()!=0)
        {
            JOptionPane.showMessageDialog(null, problems);
            return false;
        }
        
        return true;
        
    }
    
    boolean updateToDb()
    {
        
        try
        {
            
                ModeType.updateMode(txtModeName.getText(), txtCharge.getText(), txtServiceTime.getText(),currentMode);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Oops",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
            
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdSave;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JCheckBox optDiscount;
    private javax.swing.JTextField txtCharge;
    private javax.swing.JTextField txtModeName;
    private javax.swing.JTextField txtServiceTime;
    // End of variables declaration//GEN-END:variables
}
